<?php

namespace tinyorm\scaffold;

class EntityGenerator {
    private $host = "localhost";
    private $port = 3306;
    private $dbname;
    private $unixSocket;
    private $charset = "utf8";
    private $user = "root";
    private $password = "";
    /**
     * @var \PDO
     */
    private $pdo;
    private $table;
    private $class;
    private $file;
    /**
     * @var array
     */
    private $defaults = [];
    private $auto;

    function generate(): string
    {
        $this->establishDbConnection();

        $autoUpdatedCols = isset($this->auto) ? explode(",", $this->auto) : [];

        $classNameTokens = explode("\\", ltrim($this->class, "\\"));
        if (count($classNameTokens) > 1) {
            $className = array_pop($classNameTokens);
            $ns = join("\\", $classNameTokens);
        } else {
            $ns = "";
            $className = ltrim($this->class, "\\");
        }
        if (empty($className)) {
            throw new \LogicException("Class name must not be empty");
        }
        if (empty($this->table)) {
            $this->table = $this->classNameToTableName($className);
        }

        $meta = $this->resolveTableMetaData();
        list($pk, $cols, $types) = $this->tableMetaToEntityData($meta);
        return "<?php\n".
            ($ns ? "namespace $ns;\n" : "") . "/**\n".
            " * auto generated by tinyorm " . date("Y-m-d H:i:s") . "\n" .
            $this->renderPropertiesPhpDoc($types) .
            " * @method static {$className} find(\$id, \\tinyorm\\persistence\\Driver \$driver = null)\n" .
            " * @method static {$className}[] findAllByColumn(\$column, \$value, \\tinyorm\\persistence\\Driver \$driver = null, \$limit = null)\n" .
            " * @method static {$className} findByColumn(\$column, \$value, \\tinyorm\\persistence\\Driver \$driver = null)\n" .
            " */\n" .
            "class {$className} extends \\tinyorm\\Entity {\n" .
            "    static protected \$sourceName = " . $this->varExport($this->table) . ";\n" .
            "    protected \$pkName = " . $this->varExport($pk) . ";\n" .
            "    protected \$autoUpdatedCols = " . $this->varExport($autoUpdatedCols) . ";\n" .
            "    function getDefaults() {\n" .
            "        return [\n{$this->renderDefaults($cols)}        ];\n" .
            "    }\n" .
            "}\n";
    }

    function isFloatType($type) {
        if ($type == "float") {
            return true;
        } elseif ($type == "double") {
            return true;
        } elseif (false !== stripos($type, "decimal")) {
            return true;
        } else {
            return false;
        }
    }

    function isIntegerType($type) {
        if (false !== stripos($type, "int")) {
            return true;
        } else {
            return false;
        }
    }

    function renderPropertiesPhpDoc($types) {
        $lines = [];
        foreach ($types as $col => $type) {
            $lines[] = " * @property $type \$$col";
        }
        return join("\n", $lines) . "\n";
    }

    function renderDefaults($cols) {
        $lines = [];
        foreach ($cols as $col => $default) {
            if ($default === "now") {
                $expr = "date(\"Y-m-d H:i:s\")";
            } else {
                $expr = $this->varExport($default);
            }
            $lines[] = "            {$this->varExport($col)} => $expr,";
        }
        return join("\n", $lines) . "\n";
    }

    /**
     * @param string $host
     * @return EntityGenerator
     */
    public function setHost($host)
    {
        $this->host = $host ?: $this->host;
        return $this;
    }

    /**
     * @param int $port
     * @return EntityGenerator
     */
    public function setPort($port)
    {
        $this->port = $port ?: $this->port;
        return $this;
    }

    /**
     * @param mixed $dbname
     * @return EntityGenerator
     */
    public function setDbname($dbname)
    {
        $this->dbname = $dbname ?: $this->dbname;
        return $this;
    }

    /**
     * @param mixed $unixSocket
     * @return EntityGenerator
     */
    public function setUnixSocket($unixSocket)
    {
        $this->unixSocket = $unixSocket ?: $this->unixSocket;
        return $this;
    }

    /**
     * @param string $charset
     * @return EntityGenerator
     */
    public function setCharset($charset)
    {
        $this->charset = $charset ?: $this->charset;
        return $this;
    }

    /**
     * @param string $user
     * @return EntityGenerator
     */
    public function setUser($user)
    {
        $this->user = $user ?: $this->user;
        return $this;
    }

    /**
     * @param string $password
     * @return EntityGenerator
     */
    public function setPassword($password)
    {
        $this->password = $password ?: $this->password;
        return $this;
    }

    /**
     * @param mixed $table
     * @return EntityGenerator
     */
    public function setTable($table)
    {
        $this->table = $table ?: $this->table;
        return $this;
    }

    /**
     * @param mixed $class
     * @return EntityGenerator
     */
    public function setClass($class)
    {
        $this->class = $class ?: $this->class;
        return $this;
    }

    /**
     * @param mixed $file
     * @return EntityGenerator
     */
    public function setFile($file)
    {
        $this->file = $file ?: $this->file;
        return $this;
    }

    /**
     * @param mixed $defaults
     * @return EntityGenerator
     */
    public function setDefaults($defaults)
    {
        $this->defaults = $defaults ? $this->parseDefaultValues($defaults) : $this->defaults;
        return $this;
    }

    /**
     * @param mixed $auto
     * @return EntityGenerator
     */
    public function setAuto($auto)
    {
        $this->auto = $auto ?: $this->auto;
        return $this;
    }

    private function varExport($var)
    {
        return str_replace(["\r", "\n"], "", var_export($var, 1));
    }

    /**
     * @throws \PDOException
     */
    private function establishDbConnection()
    {
        $dsn = "mysql:dbname={$this->dbname};charset={$this->charset};";
        if ($this->unixSocket) {
            $dsn .= "unix_socket={$this->unixSocket};";
        } else {
            $dsn .= "host={$this->host};port={$this->port};";
        }
        $this->pdo = new \PDO($dsn, $this->user, $this->password, [\PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION]);
    }

    /**
     * @return array
     */
    private function resolveTableMetaData(): array
    {
        $stmt = $this->pdo->prepare("DESC {$this->table}");
        $stmt->execute();
        $meta = $stmt->fetchAll(\PDO::FETCH_ASSOC);
        return $meta;
    }

    /**
     * @return array
     */
    private function parseDefaultValues(string $defaults): array
    {
        $parseResult = [];
        if (isset($defaults)) {
            $keysValues = explode(",", $defaults);
            foreach ($keysValues as $keyValue) {
                list($key, $value) = explode("=", $keyValue);
                $parseResult[$key] = $value;
            }
        }
        return $parseResult;
    }

    /**
     * @param array $meta
     * @return array
     */
    private function tableMetaToEntityData(array $meta)
    {
        $pk = null;
        $cols = [];
        $types = [];
        foreach ($meta as $row) {
            $default = null;
            $phptype = "string";
            $col = $row["Field"];
            $type = $row["Type"];
            if ($row["Key"] == "PRI") {
                $pk = $col;
            } elseif (isset($this->defaults[$col])) {
                $default = $this->defaults[$col];
            } else {
                $default = $row["Default"];
                if ($default == "NULL") {
                    $default = null;
                } elseif (($type == "timestamp") || ($type == "datetime")) {
                    if ($default = "CURRENT_TIMESTAMP") {
                        $default = "now";
                    }
                    if ($row["Extra"] == "on update CURRENT_TIMESTAMP") {
                        $autoUpdatedCols[] = $col;
                    }
                } else {
                    $default = (null === $default) ? null : $default;
                }
            }

            if ($this->isFloatType($type)) {
                $phptype = "float";
            } elseif ($this->isIntegerType($type)) {
                $phptype = "int";
            }

            if (null !== $default) {
                settype($default, $phptype);
            }
            $cols[$col] = $default;
            $types[$col] = $phptype;
        }
        return [$pk, $cols, $types];
    }

    private function classNameToTableName($className)
    {
        return strtolower(preg_replace("/([a-z0-9])([A-Z])/", "\\1_\\2", $className));
    }
}